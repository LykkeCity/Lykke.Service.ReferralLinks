// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Blue.Service.ReferralLinks.Client.AutorestClient
{
    using Lykke.Blue;
    using Lykke.Blue.Service;
    using Lykke.Blue.Service.ReferralLinks;
    using Lykke.Blue.Service.ReferralLinks.Client;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LykkeReferralLinksService.
    /// </summary>
    public static partial class LykkeReferralLinksServiceExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this ILykkeReferralLinksService operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this ILykkeReferralLinksService operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get referral link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of a referral link we wanna get.
            /// </param>
            public static GetReferralLinkResponse GetReferralLink(this ILykkeReferralLinksService operations, string id)
            {
                return operations.GetReferralLinkAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get referral link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of a referral link we wanna get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetReferralLinkResponse> GetReferralLinkAsync(this ILykkeReferralLinksService operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferralLinkWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get referral links statistics by sender client id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='senderClientId'>
            /// Sender client id by which we wanna get statistics.
            /// </param>
            public static GetReferralLinksStatisticsBySenderIdResponse GetReferralLinksStatisticsBySenderId(this ILykkeReferralLinksService operations, string senderClientId)
            {
                return operations.GetReferralLinksStatisticsBySenderIdAsync(senderClientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get referral links statistics by sender client id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='senderClientId'>
            /// Sender client id by which we wanna get statistics.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetReferralLinksStatisticsBySenderIdResponse> GetReferralLinksStatisticsBySenderIdAsync(this ILykkeReferralLinksService operations, string senderClientId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferralLinksStatisticsBySenderIdWithHttpMessagesAsync(senderClientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request money transfer referral link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string RequestGiftCoinsReferralLink(this ILykkeReferralLinksService operations, GiftCoinsReferralLinkRequest request = default(GiftCoinsReferralLinkRequest))
            {
                return operations.RequestGiftCoinsReferralLinkAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request money transfer referral link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RequestGiftCoinsReferralLinkAsync(this ILykkeReferralLinksService operations, GiftCoinsReferralLinkRequest request = default(GiftCoinsReferralLinkRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestGiftCoinsReferralLinkWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request invitation referral link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string RequestInvitationReferralLink(this ILykkeReferralLinksService operations, InvitationReferralLinkRequest request = default(InvitationReferralLinkRequest))
            {
                return operations.RequestInvitationReferralLinkAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request invitation referral link.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> RequestInvitationReferralLinkAsync(this ILykkeReferralLinksService operations, InvitationReferralLinkRequest request = default(InvitationReferralLinkRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RequestInvitationReferralLinkWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string ClaimGiftCoins(this ILykkeReferralLinksService operations, ClaimReferralLinkRequest request = default(ClaimReferralLinkRequest))
            {
                return operations.ClaimGiftCoinsAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ClaimGiftCoinsAsync(this ILykkeReferralLinksService operations, ClaimReferralLinkRequest request = default(ClaimReferralLinkRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClaimGiftCoinsWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string ClaimInvitationLink(this ILykkeReferralLinksService operations, ClaimReferralLinkRequest request = default(ClaimReferralLinkRequest))
            {
                return operations.ClaimInvitationLinkAsync(request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ClaimInvitationLinkAsync(this ILykkeReferralLinksService operations, ClaimReferralLinkRequest request = default(ClaimReferralLinkRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClaimInvitationLinkWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get offchain ChannelKey.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            public static string GetChannelKey(this ILykkeReferralLinksService operations, string asset = default(string), string clientId = default(string))
            {
                return operations.GetChannelKeyAsync(asset, clientId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get offchain ChannelKey.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asset'>
            /// </param>
            /// <param name='clientId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetChannelKeyAsync(this ILykkeReferralLinksService operations, string asset = default(string), string clientId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetChannelKeyWithHttpMessagesAsync(asset, clientId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create offchain transfer to Lykke wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static string TransferToLykkeWalletMethod(this ILykkeReferralLinksService operations, TransferToLykkeWallet model = default(TransferToLykkeWallet))
            {
                return operations.TransferToLykkeWalletMethodAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create offchain transfer to Lykke wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> TransferToLykkeWalletMethodAsync(this ILykkeReferralLinksService operations, TransferToLykkeWallet model = default(TransferToLykkeWallet), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TransferToLykkeWalletMethodWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Process offchain channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string ProcessChannel(this ILykkeReferralLinksService operations, OffchainChannelProcessModel request = default(OffchainChannelProcessModel))
            {
                return operations.ProcessChannelAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Process offchain channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ProcessChannelAsync(this ILykkeReferralLinksService operations, OffchainChannelProcessModel request = default(OffchainChannelProcessModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProcessChannelWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Process offchain channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static string FinalizeRefLinkTransfer(this ILykkeReferralLinksService operations, OffchainFinalizeModel request = default(OffchainFinalizeModel))
            {
                return operations.FinalizeRefLinkTransferAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Process offchain channel
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> FinalizeRefLinkTransferAsync(this ILykkeReferralLinksService operations, OffchainFinalizeModel request = default(OffchainFinalizeModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FinalizeRefLinkTransferWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
